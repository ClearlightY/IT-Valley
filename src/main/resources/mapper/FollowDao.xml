<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mybatis会动态实现daoImpl,不过需要在mapper文件夹下创建BookDao.xml和AppointmentDao.xml
      spring-dao.xml文件会自动扫描mapper文件夹下的配置 -->
<!--
1.namespace是该xml对应的接口的全名
2.select和update中的id对应方法名
3.resultType是返回值类型
4.parameterType是参数类型(可选)
5.#{...}填写的是方法的参数
6.parameterType:输入参数类型
7.resultType:输出参数类型
-->
<mapper namespace="top.clearlight.dao.FollowDao">
    <!-- 目的：为dao接口方法提供sql语句配置 -->
    <resultMap id="BaseResultMap" type="top.clearlight.entity.User">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="score" jdbcType="INTEGER" property="score"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="signature" jdbcType="VARCHAR" property="signature"/>
        <result column="receive_msg" jdbcType="BIT" property="receiveMsg"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="update_date" jdbcType="TIMESTAMP" property="updateDate"/>
        <result column="user_addr" jdbcType="VARCHAR" property="userAddr"/>
        <result column="third_id" jdbcType="VARCHAR" property="thirdId"/>
    </resultMap>
    <sql id="Base_Column_List">
        b.user_id, b.user_name, b.password, b.score, b.avatar, b.email, b.url, b.signature, b.receive_msg,
        a.create_date, b.update_date,b.user_addr,b.third_id
    </sql>

    <sql id="User_Column_List">
        user_id, user_name, password, user_sex, score, avatar, email, url, signature, receive_msg,
        create_date, update_date,user_addr,third_id,third_access_token
    </sql>
    <!-- 我关注的人 -->
    <select id="select" resultType="User">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        follow a,user b
        where a.uid = #{uid}
        and a.fid = b.user_id
        order by a.create_date desc
        <if test="start != null">
            limit #{start,jdbcType=INTEGER}
            <if test="limit != null">
                ,#{limit,jdbcType=INTEGER}
            </if>
        </if>
    </select>

    <!-- 关注的人的主题 -->
    <select id="selectTopic" resultType="Topic">
        SELECT
        c.*
        FROM
        follow a,user b,topic c
        where a.uid = #{uid}
        and a.fid = b.user_id
        and b.user_name = c.author
        order by c.create_date desc
        <if test="start != null">
            limit #{start,jdbcType=INTEGER}
            <if test="limit != null">
                ,#{limit,jdbcType=INTEGER}
            </if>
        </if>
    </select>
    <!-- 关注我的人 -->
    <select id="selectByFid" resultType="User">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        follow a,user b
        where a.fid = #{fid}
        and a.uid = b.user_id
        order by a.create_date desc
        <if test="start != null">
            limit #{start,jdbcType=INTEGER}
            <if test="limit != null">
                ,#{limit,jdbcType=INTEGER}
            </if>
        </if>
    </select>
    <!-- 添加关注 -->
    <insert id="insert" parameterType="top.clearlight.entity.Follow" keyProperty="id" useGeneratedKeys="true">
     	insert into follow
     	(uid,
     	 fid,
     	 create_date)
     	values
     	(#{uid},
     	 #{fid},
     	 #{createDate})
     </insert>
    <!-- 取消关注 -->
    <delete id="delete">
     	delete from follow
     	where uid = #{uid}
     	and fid = #{fid}
     </delete>
    <!-- 统计用户关注的数量 -->
    <select id="countByUid" resultType="java.lang.Integer">
     	select count(1)
     	from follow
     	where uid = #{uid}
     </select>
    <!-- 统计用户被关注的数量 -->
    <select id="countByFid" resultType="java.lang.Integer">
     	select count(1)
     	from follow
     	where fid = #{fid}
     </select>
    <!-- 判断是否已关注 0：否 1：是 -->
    <select id="isFollow" resultType="java.lang.Integer">
        /*统计包括null值的所有符合条件的字段的条数*/
     	select count(1)
     	from follow
     	/*登录用户ID*/
     	where uid = #{uid}
     	/*访问页面用户ID*/
     	and fid = #{fid}
     </select>
    <!-- 关注的人的主题的数量 -->
    <select id="countTopic" resultType="java.lang.Integer">
     	select count(c.topic_id)
     	from follow a,user b,topic c
     	where a.uid = #{uid}
     	and a.fid = b.user_id
     	and b.user_name = c.author
     </select>

    <!-- 我关注的用户 -->
    <select id="selectByUid" resultType="User">
        select
            <include refid="User_Column_List"/>
        from
            user
        where
            user_id in (
                select fid from follow where uid=#{uid}
            )
    </select>
</mapper>